unit Client_U;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, pngimage, CustomButtons, ComCtrls, StdCtrls, Client, ColoredListBox,
  Grids, DBGrids, Menus, dmPropertyHub_U, ClientPropertyCard, ListingDetails; // Kyk

type
  TfrmClient = class(TForm)
    pnlNavBar: TPanel;
    Image1: TImage;
    pnlViewProperties: TPanel;
    imgPropertiesIcon: TImage;
    pnlViewOffers: TPanel;
    imgOffersIcon: TImage;
    pnlProfile: TPanel;
    pnlHeader: TPanel;
    pcClient: TPageControl;
    tbsProperties: TTabSheet;
    tbsOffers: TTabSheet;
    pnlProperties: TPanel;
    pnlOffers: TPanel;
    lbOffers: TListBox;
    gbxOfferDetails: TGroupBox;
    lblOfferInstruction: TLabel;
    dbgListings: TDBGrid;
    gbxPropertyDetails: TGroupBox;
    gbxListingDetails: TGroupBox;
    popmProfile: TPopupMenu;
    piLogout: TMenuItem;
    piResetPassword: TMenuItem;
    scrlbPropertyDetails: TScrollBox;
    pnlViewMoreContainer: TPanel;
    pnlViewMore: TPanel;
    pnlFilterContainer: TPanel;
    shpFilterDivider: TShape;
    pnlFilterViewAll: TPanel;
    Label1: TLabel;
    pnlFilterShowResults: TPanel;
    cmbxFilterColumn: TComboBox;
    edtFilterValue: TEdit;
    pnlListingDetailsContainer: TPanel;
    Label2: TLabel;
    Label3: TLabel;
    Panel2: TPanel;
    Edit1: TEdit;
    RichEdit1: TRichEdit;
    RichEdit2: TRichEdit;
    splitDivider: TSplitter;
    procedure FormActivate(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure FormCreate(Sender: TObject);
    procedure pnlProfileClick(Sender: TObject);
    procedure piLogoutClick(Sender: TObject);
    procedure pnlViewPropertiesClick(Sender: TObject);
    procedure pnlFilterViewAllClick(Sender: TObject);
    procedure pnlViewMoreClick(Sender: TObject);
    procedure pnlFilterShowResultsClick(Sender: TObject);
    procedure pcClientChange(Sender: TObject);
    procedure lbOffersClick(Sender: TObject);
  private
    { Private declarations }
    objClient : TClient;
    objPropertyManager : TPropertyCardManager;
    listPropertyID : TStringList;
    iPanelLimit, iPanelAmount : integer;

    procedure GetOfferDetails;
    procedure ViewFilters(listPropertyID : TStringList; Limit : integer; VisiblePanels : integer);
  public
    { Public declarations }
    iClientID : integer;
  end;
const
  PANEL_LIMIT = 10;
var
  frmClient: TfrmClient;

implementation

{$R *.dfm}

procedure TfrmClient.FormActivate(Sender: TObject); // Kyk
var
  i : integer;
begin
  pnlListingDetailsContainer.Visible := False;
  pcClient.OnChange(self);

  objClient := TClient.Create(iClientID);
  objPropertyManager := TPropertyCardManager.Create(scrlbPropertyDetails, gbxListingDetails);
  pnlNavBar.Color := RGB(0, 42, 102);
  pnlViewProperties.ParentBackground := True;
  pnlViewOffers.ParentBackground := True;
  pnlHeader.Color := RGB(70, 130, 180);
  pnlHeader.Font.Color := clYellow;
  pnlProperties.Color := RGB(173,216,230);
  pnlOffers.Color := RGB(70, 130, 180);
  gbxOfferDetails.Color := RGB(173,216,230);

  iPanelLimit := 0;
  iPanelAmount := 0;

end;

procedure TfrmClient.FormCloseQuery(Sender: TObject; var CanClose: Boolean);   // Kyk
var
  iCount, i : integer;
  tempClientCard : TClientPropertyCard;
begin
  for i := 0 to objPropertyManager.CardCount - 1 do
    begin
      if Assigned(TClientPropertyCard(objPropertyManager.Cards[I]).ListingManager) then
      begin
        tempClientCard := objPropertyManager.Cards[I] as TClientPropertyCard;
        tempClientCard.ListingManager.Destroy;
      end;
    end;

  objPropertyManager.Free;
  objClient.Free;
  pnlViewMoreContainer.Visible := False;
  self.Refresh;
  Application.MainForm.Show;



end;

procedure TfrmClient.FormCreate(Sender: TObject);
var
  pnlMyProfile : TCustomButtons;
begin
  pnlMyProfile := TCustomButtons.Create(pnlProfile);

  with pnlMyProfile do
  begin
    Color := RGB(70, 130, 180);
    BorderRadius := 50;
    Click.Color := RGB(60, 120, 170);
  end;
end;

procedure TfrmClient.GetOfferDetails;    // Kyk
var
  sStreet, sStatus : string;
  dtOfferDate : TDateTime;
  iListingID : integer;
  iPropertyID : integer;
begin
  with dmPropertyHub do
  begin
    lbOffers.Clear;
    dsOffers.DataSet := qryOffers;
    dsProperties.DataSet := qryProperties;
    dsListings.DataSet := qryListings;


    qryOffers.SQL.Clear;
    qryOffers.SQL.Add('SELECT * FROM tblOffers WHERE ClientID = ' + IntToStr(iClientID));
    qryOffers.Open;

    qryOffers.First;
    while not qryOffers.Eof do
    begin
      iListingID := qryOffers['ListingID'];

      qryListings.SQL.Clear;
      qryListings.SQL.Add('SELECT PropertyID FROM tblListings WHERE ListingID = ' + IntToStr(iListingID));
      qryListings.Open;

      iPropertyID := qryListings.FieldByName('PropertyID').AsInteger;

      qryProperties.SQL.Clear;
      qryProperties.SQL.Add('SELECT * FROM tblProperties WHERE PropertyID = ' + IntToStr(iPropertyID));
      qryProperties.Open;

      sStreet := qryProperties.FieldByName('StreetAddress').AsString;
      dtOfferDate := qryOffers['OfferDate'];
      sStatus := qryOffers['OfferStatus'];

      lbOffers.Items.Add('[' + IntToStr(iPropertyID) + ']:  ' + sStreet + ' | Status: ' + sStatus + ' | Offer Date: ' + DateToStr(dtOfferDate));
      if sStatus = 'Pending' then
        lbOffers.SetItemColor(lbOffers.Count - 1, clYellow)
      else if sStatus = 'Rejected' then
        lbOffers.SetItemColor(lbOffers.Count - 1, clRed)
      else if sStatus = 'Accepted' then
        lbOffers.SetItemColor(lbOffers.Count - 1, clGreen);

      qryOffers.Next;
    end;

  end;
end;

procedure TfrmClient.lbOffersClick(Sender: TObject);
var
  sLine : string;
  iPos : integer;
  iPropertyID : integer;

begin
  sLine := lbOffers.Items[lbOffers.ItemIndex];
  iPos := pos(']', sLine);
  iPropertyID := StrToInt(Copy(sLine, 2, iPos - 2));

  if not Assigned(objPropertyManager) then
  begin
    objPropertyManager := TPropertyCardManager.Create(scrlbPropertyDetails, gbxListingDetails);
  end else
  begin
    objPropertyManager.Free;
    objPropertyManager := TPropertyCardManager.Create(scrlbPropertyDetails, gbxListingDetails);
    iPanelLimit := 0;
    iPanelAmount := 0;
  end;
  listPropertyID := objPropertyManager.Filter('PropertyID', IntToStr(iPropertyID));
  ViewFilters(listPropertyID, PANEL_LIMIT, 0);
  pnlViewMore.OnClick(self);

  tbsProperties.Show;




end;

procedure TfrmClient.pcClientChange(Sender: TObject);
begin
  if pcClient.TabIndex = 1 then
  begin
    GetOfferDetails;
  end;
end;

procedure TfrmClient.piLogoutClick(Sender: TObject);
begin
  if MessageDlg('Are you sure?', mtConfirmation, [mbYes, mbNo], 0) = mrYes then
  begin
    Application.MainForm.Show;
    Self.Close;
  end;


end;

procedure TfrmClient.pnlFilterShowResultsClick(Sender: TObject);
begin
  if not Assigned(objPropertyManager) then
  begin
    objPropertyManager := TPropertyCardManager.Create(scrlbPropertyDetails, gbxListingDetails);
  end else
  begin
    objPropertyManager.Free;
    objPropertyManager := TPropertyCardManager.Create(scrlbPropertyDetails, gbxListingDetails);
    iPanelLimit := 0;
    iPanelAmount := 0;
  end;
  listPropertyID := objPropertyManager.Filter(cmbxFilterColumn.Text, edtFilterValue.Text);
  ViewFilters(listPropertyID, PANEL_LIMIT, 0);
  pnlViewMore.OnClick(self);
end;

procedure TfrmClient.pnlFilterViewAllClick(Sender: TObject);
begin
  if not Assigned(objPropertyManager) then
  begin
    objPropertyManager := TPropertyCardManager.Create(scrlbPropertyDetails, gbxListingDetails);
  end else
  begin
    objPropertyManager.Free;
    objPropertyManager := TPropertyCardManager.Create(scrlbPropertyDetails, gbxListingDetails);
    iPanelLimit := 0;
    iPanelAmount := 0;
  end;
  listPropertyID := objPropertyManager.Filter('*');
  ViewFilters(listPropertyID, PANEL_LIMIT, 0);
  pnlViewMore.OnClick(self);
end;

procedure TfrmClient.pnlProfileClick(Sender: TObject);
var
  i : integer;
  tempImage : TImage;
  xpos, ypos : integer;
  pos : TPoint;
begin
  pos.X := pnlProfile.Left;
  pos.Y := pnlProfile.Top;

  Pos := ClientToScreen(pos);

  popmProfile.Popup(Pos.X - (pnlProfile.Width div 2), Pos.Y + pnlProfile.Height + 10);

end;

procedure TfrmClient.pnlViewMoreClick(Sender: TObject);
begin
  pnlViewMoreContainer.Visible := False;
  iPanelLimit := iPanelLimit + PANEL_LIMIT;
  ViewFilters(ListPropertyID, iPanelLimit, iPanelAmount);
  pnlViewMoreContainer.Top := 0;

end;

procedure TfrmClient.pnlViewPropertiesClick(Sender: TObject);
var
  i: Integer;
begin
  //ScrollBox1.DoubleBuffered := True;
  if not Assigned(objPropertyManager) then
  begin
    objPropertyManager := TPropertyCardManager.Create(scrlbPropertyDetails, gbxListingDetails);
  end else
  begin
    objPropertyManager.Free;
    objPropertyManager := TPropertyCardManager.Create(scrlbPropertyDetails, gbxListingDetails);
  end;
  objPropertyManager.Filter('Province','Gauteng');

  //clientPropertyCard.Free;
end;

procedure TfrmClient.ViewFilters(listPropertyID: TStringList; Limit,   // Kyk
  VisiblePanels: integer);
var
  i : integer;
begin
  for i := VisiblePanels to Limit - 1 do
  begin
    if iPanelAmount = listPropertyID.Count then
    begin
      exit;
      pnlViewMoreContainer.Visible := False;
    end;

    inc(iPanelAmount);
    objPropertyManager.CardCount := objPropertyManager.CardCount + 1;
    objPropertyManager.Add(StrToInt(listPropertyID[i]));
  end;

  if iPanelAmount < listPropertyID.Count then
  begin
    pnlViewMoreContainer.Visible := True;
  end else
  begin
    pnlViewMoreContainer.Visible := False;
  end;
end;

end.

unit Jumper_U;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, jpeg, math, Buttons, StdCtrls, pngimage,OleCtrls, WMPLib_TLB;

type
  TfrmJumper = class(TForm)
    tmrUp: TTimer;
    tmrDown: TTimer;
    imgBackground: TImage;
    pnlScore: TPanel;
    tmrScore: TTimer;
    tmrEnemy1Move: TTimer;
    tmrLose: TTimer;
    tmrEnemy2Move: TTimer;
    tmrEnemy3Move: TTimer;
    tmrEnemy4Move: TTimer;
    tmrEnemy5Move: TTimer;
    tmrEnemy6Move: TTimer;
    tmrDoubleJump: TTimer;
    btnStart: TButton;
    bmbQuit: TBitBtn;
    pnlHighScore: TPanel;
    Label1: TLabel;
    Label2: TLabel;
    Player: TImage;
    tmrDifficulty: TTimer;
    procedure tmrUpTimer(Sender: TObject);
    procedure tmrDownTimer(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure tmrScoreTimer(Sender: TObject);
    procedure tmrEnemy1MoveTimer(Sender: TObject);
    procedure tmrLoseTimer(Sender: TObject);
    procedure tmrEnemy2MoveTimer(Sender: TObject);
    procedure tmrEnemy3MoveTimer(Sender: TObject);
    procedure tmrEnemy4MoveTimer(Sender: TObject);
    procedure tmrEnemy5MoveTimer(Sender: TObject);
    procedure tmrEnemy6MoveTimer(Sender: TObject);
    procedure tmrDoubleJumpTimer(Sender: TObject);
    procedure FormContextPopup(Sender: TObject; MousePos: TPoint;
      var Handled: Boolean);
    procedure btnStartClick(Sender: TObject);
    procedure FormKeyPress(Sender: TObject; var Key: Char);
    procedure bmbQuitClick(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure tmrDifficultyTimer(Sender: TObject);
  private
    { Private declarations }
    iScore : integer;
    iEnemy1Show, iEnemy2Show, iEnemy3Show, iEnemy4Show, iEnemy5Show, iEnemy6Show : integer;
    bEnemy1Available, bEnemy2Available, bEnemy3Available, bEnemy4Available, bEnemy5Available, bEnemy6Available: boolean;
    tFileJumper : TextFile;

    procedure Lose(Timer : TTimer; Enemy : TShape);
  public
    { Public declarations }
    iHighScoreJ : integer;
  end;

var
  frmJumper: TfrmJumper;
  Enemy1: tShape;
  Enemy2: tShape;
  Enemy3: tShape;
  Enemy4: tShape;
  Enemy5: tShape;
  Enemy6: tShape;
  wmpBackgroundMusic: TWindowsMediaPlayer;

implementation

{$R *.dfm}

procedure TfrmJumper.bmbQuitClick(Sender: TObject);
begin
  Self.Close;
end;

procedure TfrmJumper.btnStartClick(Sender: TObject);
begin
  wmpBackgroundMusic.controls.play;
  tmrScore.Enabled := True;
  tmrDifficulty.Enabled := True;
  iEnemy1Show := iScore + RandomRange(1, 2);
  iEnemy2Show := iScore + RandomRange(3, 4);
  iEnemy3Show := iScore + RandomRange(5, 6);
  iEnemy4Show := iScore + RandomRange(7, 8);
  iEnemy5Show := iScore + RandomRange(9, 10);
  iEnemy6Show := iScore + RandomRange(11, 12);
  btnStart.Hide;
  bmbQuit.Hide;
  tmrLose.Enabled := True;
end;

procedure TfrmJumper.FormActivate(Sender: TObject);
begin

  wmpBackgroundMusic := TWindowsMediaPlayer.Create(frmJumper);
  with wmpBackgroundMusic do
  begin
    settings.autoStart := False;
    URL := 'Music\Jumper.mp3';
    Width := 245;
    Height := 240;
    Top := 0 - wmpBackgroundMusic.Height;
    Left := 0 - wmpBackgroundMusic.Width;
    settings.playCount := 99;
    settings.volume := 10;
  end;

  Randomize;
  try
    AssignFile(tFileJumper, 'Jumper.txt');
    reset(tFileJumper);
    while not eof(tFileJumper) do
    begin
      Readln(tFileJumper, iHighScoreJ);
      pnlHighScore.Caption := IntToStr(iHighScoreJ);
    end;
      CloseFile(tFileJumper);
  except
    if iScore >= iHighScoreJ then
    begin
      pnlHighScore.Caption := IntToStr(iScore);
      iHighScoreJ := StrToInt(pnlHighScore.Caption);
    end;
  end;
  btnStart.Show;
  bmbQuit.Show;
end;

procedure TfrmJumper.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
begin
  wmpBackgroundMusic.Destroy;
  Application.MainForm.Show;
  bEnemy1Available := False;
  bEnemy2Available := False;
  bEnemy3Available := False;
  bEnemy4Available := False;
  bEnemy5Available := False;
  bEnemy6Available := False;
  if bEnemy1Available = True then Enemy1.Destroy;
  if bEnemy2Available = True then Enemy2.Destroy;
  if bEnemy3Available = True then Enemy3.Destroy;
  if bEnemy4Available = True then Enemy4.Destroy;
  if bEnemy5Available = True then Enemy5.Destroy;
  if bEnemy6Available = True then Enemy6.Destroy;

  tmrEnemy1Move.Enabled := False;
  tmrEnemy2Move.Enabled := False;
  tmrEnemy3Move.Enabled := False;
  tmrEnemy4Move.Enabled := False;
  tmrEnemy5Move.Enabled := False;
  tmrEnemy6Move.Enabled := False;
  tmrLose.Enabled := False;
  tmrScore.Enabled := False;
  iScore := 0;
  pnlScore.Caption := IntToStr(iScore);
  btnStart.Show;
  bmbQuit.Show;
end;

procedure TfrmJumper.FormContextPopup(Sender: TObject; MousePos: TPoint;
  var Handled: Boolean);
begin
  if (tmrDown.Enabled = False) then
  begin
    tmrDoubleJump.Enabled := True;
    tmrDown.Enabled := False;
  end;
end;

procedure TfrmJumper.FormKeyPress(Sender: TObject; var Key: Char);
begin
  if (tmrDown.Enabled = False) and (tmrUp.Enabled = False) then
  begin
    Key := ' ';
    tmrUp.Enabled := True;
    tmrDown.Enabled := False;
  end;
end;

procedure TfrmJumper.Lose(Timer: TTimer; Enemy: TShape);
var
overlay : TRect;
begin
  if Timer.Enabled = True then
  begin
    if IntersectRect(overlay, Enemy.BoundsRect, Player.BoundsRect) then  //Enemy1 Verloor
    begin
      wmpBackgroundMusic.controls.stop;
      if tmrEnemy1Move.Enabled = True then Enemy1.Destroy;
      if tmrEnemy2Move.Enabled = True then Enemy2.Destroy;
      if tmrEnemy3Move.Enabled = True then Enemy3.Destroy;
      if tmrEnemy4Move.Enabled = True then Enemy4.Destroy;
      if tmrEnemy5Move.Enabled = True then Enemy5.Destroy;
      if tmrEnemy6Move.Enabled = True then Enemy6.Destroy;
      tmrEnemy1Move.Enabled := False;
      tmrEnemy2Move.Enabled := False;
      tmrEnemy3Move.Enabled := False;
      tmrEnemy4Move.Enabled := False;
      tmrEnemy5Move.Enabled := False;
      tmrEnemy6Move.Enabled := False;
      tmrLose.Enabled := False;
      tmrEnemy1Move.Enabled := False;
      tmrEnemy2Move.Enabled := False;
      tmrEnemy3Move.Enabled := False;
      tmrEnemy4Move.Enabled := False;
      tmrEnemy5Move.Enabled := False;
      tmrEnemy6Move.Enabled := False;
      tmrScore.Enabled := False;
      tmrDifficulty.Enabled := False;
      iScore := 0;
      pnlScore.Caption := IntToStr(iScore);
      ShowMessage('You lost');
      btnStart.Show;
      bmbQuit.Show;
    end;
  end;
end;

procedure TfrmJumper.tmrDifficultyTimer(Sender: TObject);
begin
  if (iScore = iEnemy1Show) AND (tmrEnemy1Move.Enabled = False) then     //Create Enemy1
  begin
    Enemy1 := tShape.Create(frmJumper);
    with Enemy1 do
    begin
      width := 30;
      height := 30;
      top := 470;
      Brush.Color := clRed;
      Enabled := False;
      left := frmJumper.Width - width;
      parent := frmJumper;
    end;
    tmrEnemy1Move.Enabled := True;
  end;

  if (iScore = iEnemy2Show) AND (tmrEnemy2Move.Enabled = False) then     //Create Enemy2
  begin
    Enemy2 := tShape.Create(frmJumper);
    with Enemy2 do
    begin
      width := 30;
      height := 30;
      top := 580;
      Brush.Color := clRed;
      Enabled := False;
      left := frmJumper.Width - width;
      parent := frmJumper;
    end;
    tmrEnemy2Move.Enabled := True;
  end;

  if (iScore = iEnemy3Show) AND (tmrEnemy3Move.Enabled = False) then            //Create Enemy3
  begin
    Enemy3 := tShape.Create(frmJumper);
    with Enemy3 do
    begin
      width := 30;
      height := 30;
      top := 470;
      Brush.Color := clRed;
      Enabled := False;
      left := frmJumper.Width - width;
      parent := frmJumper;
    end;
    tmrEnemy3Move.Enabled := True;
  end;

  if (iScore = iEnemy4Show) AND (tmrEnemy4Move.Enabled = False) then             //Create Enemy4
  begin
    Enemy4 := tShape.Create(frmJumper);
    with Enemy4 do
    begin
      width := 30;
      height := 30;
      top := 580;
      Brush.Color := clRed;
      Enabled := False;
      left := frmJumper.Width - width;
      parent := frmJumper;
    end;
    tmrEnemy4Move.Enabled := True;
  end;

  if (iScore = iEnemy5Show) AND (tmrEnemy5Move.Enabled = False) then           //Create Enemy5
  begin
    Enemy5 := tShape.Create(frmJumper);
    with Enemy5 do
    begin
      width := 30;
      height := 30;
      top := 470;
      Brush.Color := clRed;
      Enabled := False;
      left := frmJumper.Width - width;
      parent := frmJumper;
    end;
    tmrEnemy5Move.Enabled := True;
  end;

  if (iScore = iEnemy6Show) AND (tmrEnemy6Move.Enabled = False) then            //Create Enemy6
  begin
    Enemy6 := tShape.Create(frmJumper);
    with Enemy6 do
    begin
      width := 30;
      height := 30;
      top := 580;
      Brush.Color := clRed;
      Enabled := False;
      left := frmJumper.Width - width;
      parent := frmJumper;
    end;
    tmrEnemy6Move.Enabled := True;
  end;
end;

procedure TfrmJumper.tmrDoubleJumpTimer(Sender: TObject);
begin
  if Player.Top >= 320 then
  begin
    Player.Top := Player.Top - 30;
  end else if Player.Top <= 320 then
  begin
    tmrDoubleJump.Enabled := False;
    tmrDown.Enabled := True;
  end;
end;

procedure TfrmJumper.tmrDownTimer(Sender: TObject);
begin
  if Player.Top < 530 then
  begin
    Player.Top := Player.Top + 10;
  end else
  begin
    tmrDown.Enabled := False;
  end;

end;

procedure TfrmJumper.tmrEnemy1MoveTimer(Sender: TObject);
begin
 if iScore < 10 then
 begin
  Enemy1.Left := Enemy1.Left - 10;
 end else if iScore >= 10 then
  begin
    Enemy1.Left := Enemy1.Left - 12;
  end else if iScore >= 50 then
  begin
    Enemy1.Left := Enemy1.Left - 15;
  end;


  if Enemy1.Left < 1 then
  begin
    Enemy1.Destroy;
    iEnemy1Show := iScore + RandomRange(3, 5);
    tmrEnemy1Move.Enabled := False;
  end;
end;

procedure TfrmJumper.tmrEnemy2MoveTimer(Sender: TObject);
begin
 if iScore < 10 then
 begin
  Enemy2.Left := Enemy2.Left - 10;
 end else if iScore >= 20 then
  begin
    Enemy2.Left := Enemy2.Left - 12;
  end else if iScore >= 50 then
  begin
    Enemy2.Left := Enemy2.Left - 15;
  end;


  if Enemy2.Left < 1 then
  begin
    Enemy2.Destroy;
    iEnemy2Show := iScore + RandomRange(4, 6);
    tmrEnemy2Move.Enabled := False;
  end;


end;

procedure TfrmJumper.tmrEnemy3MoveTimer(Sender: TObject);
begin
 if iScore < 10 then
 begin
  Enemy3.Left := Enemy3.Left - 10;
 end else if iScore >= 20 then
  begin
    Enemy3.Left := Enemy3.Left - 12;
  end else if iScore >= 50 then
  begin
    Enemy3.Left := Enemy3.Left - 15;
  end;



  if Enemy3.Left < 1 then
  begin
    Enemy3.Destroy;
    iEnemy3Show := iScore + RandomRange(5, 7);
    tmrEnemy3Move.Enabled := False;
  end;

end;

procedure TfrmJumper.tmrEnemy4MoveTimer(Sender: TObject);
begin
 if iScore < 10 then
 begin
  Enemy4.Left := Enemy4.Left - 10;
 end else if iScore >= 10 then
  begin
    Enemy4.Left := Enemy4.Left - 12;
  end else if iScore >= 50 then
  begin
    Enemy4.Left := Enemy4.Left - 15;
  end;


  if Enemy4.Left < 1 then
  begin
    Enemy4.Destroy;
    iEnemy4Show := iScore + RandomRange(6, 8);
    tmrEnemy4Move.Enabled := False;
  end;

end;

procedure TfrmJumper.tmrEnemy5MoveTimer(Sender: TObject);
begin
 if iScore < 10 then
 begin
  Enemy5.Left := Enemy5.Left - 10;
 end else if iScore >= 10 then
  begin
    Enemy5.Left := Enemy5.Left - 12;
  end else if iScore >= 50 then
  begin
    Enemy5.Left := Enemy5.Left - 15;
  end;



  if Enemy5.Left < 1 then
  begin
    Enemy5.Destroy;
    iEnemy5Show := iScore + RandomRange(7, 9);
    tmrEnemy5Move.Enabled := False;
  end;

end;

procedure TfrmJumper.tmrEnemy6MoveTimer(Sender: TObject);
begin
 if iScore < 10 then
 begin
  Enemy6.Left := Enemy6.Left - 10;
 end else if iScore >= 10 then
  begin
    Enemy6.Left := Enemy6.Left - 12;
  end else if iScore >= 50 then
  begin
    Enemy6.Left := Enemy6.Left - 15;
  end;


  if Enemy6.Left < 1 then
  begin
    Enemy6.Destroy;
    iEnemy6Show := iScore + RandomRange(8, 10);
    tmrEnemy6Move.Enabled := False;
  end;
end;

procedure TfrmJumper.tmrLoseTimer(Sender: TObject);
var
overlay : TRect;
begin
  Lose(tmrEnemy1Move, Enemy1);
  Lose(tmrEnemy2Move, Enemy2);
  Lose(tmrEnemy3Move, Enemy3);
  Lose(tmrEnemy4Move, Enemy4);
  Lose(tmrEnemy5Move, Enemy5);
  Lose(tmrEnemy6Move, Enemy6);
end;

procedure TfrmJumper.tmrScoreTimer(Sender: TObject);
begin
  inc(iScore);
  pnlScore.Caption := IntToStr(iScore);

  try
  AssignFile(tFileJumper, 'Jumper.txt');
  Append(tFileJumper);
    if iScore >= iHighScoreJ then
    begin
      Rewrite(tFileJumper);
      pnlHighScore.Caption := IntToStr(iScore);
      iHighScoreJ := StrToInt(pnlHighScore.Caption);
      Writeln(tFileJumper, IntToStr(iHighScoreJ));
    end;
      CloseFile(tFileJumper);
  except
    if iScore >= iHighScoreJ then
    begin
      iHighScoreJ := iScore;
      pnlHighScore.Caption := IntToStr(iHighScoreJ);
    end;
  end;
end;

procedure TfrmJumper.tmrUpTimer(Sender: TObject);
begin                                          // 460 max 540 min
if Player.Top >= 410 then
begin
  Player.Top := Player.Top - 20;
end else if Player.Top <= 410 then
begin
  tmrUp.Enabled := False;
  tmrDown.Enabled := True;
end;
end;
end.
